import org.json.JSONObject;
import org.json.JSONTokener;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;

public class ShamirSecretSolver {

    private static BigInteger convertToDecimal(String value, int base) {
        return new BigInteger(value, base);
    }

    private static BigInteger[][] parsePoints(String filename, int[] nk) throws IOException {
        FileReader reader = new FileReader(filename);
        JSONTokener tokener = new JSONTokener(reader);
        JSONObject jsonObject = new JSONObject(tokener);

        JSONObject keys = jsonObject.getJSONObject("keys");
        nk[0] = keys.getInt("n"); 
        nk[1] = keys.getInt("k");  

        BigInteger[][] points = new BigInteger[nk[0]][2];

        int index = 0;
        for (String key : jsonObject.keySet()) {
            if (key.equals("keys")) continue;

            int x = Integer.parseInt(key); 
            JSONObject pointData = jsonObject.getJSONObject(key);
            int base = pointData.getInt("base");
            String valueStr = pointData.getString("value");

            BigInteger y = convertToDecimal(valueStr, base);  
            points[index][0] = BigInteger.valueOf(x);  
            points[index][1] = y;  
            index++;
        }

        reader.close();
        return points;
    }

    private static BigInteger lagrangeInterpolation(BigInteger[][] points, int k) {
        BigInteger constantTerm = BigInteger.ZERO;

        for (int i = 0; i < k; i++) {
            BigInteger xi = points[i][0];
            BigInteger yi = points[i][1];
            BigInteger term = yi;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    BigInteger xj = points[j][0];
                    BigInteger numerator = xj.negate();
                    BigInteger denominator = xi.subtract(xj);
                    term = term.multiply(numerator).divide(denominator);
                }
            }
            constantTerm = constantTerm.add(term);
        }
        return constantTerm;
    }

    public static void main(String[] args) {
        try {
            int[] nk = new int[2];  
            BigInteger[][] points = parsePoints("input.json", nk);  

            int k = nk[1];

            // Compute the secret (constant term)
            BigInteger secret = lagrangeInterpolation(points, k);
            System.out.println("The secret (constant term c) is: " + secret);

        } catch (IOException e) {
            System.out.println("Error reading the file: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
}
